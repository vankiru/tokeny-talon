from talon import Context, actions

ctx = Context()
ctx.matches = "title: /.*\.py (.*) - VIM/"

ctx.lists["user.exception_name"] = {
    "base": "BaseException",
    "base group": "BaseExceptionGroup",
    "generator exit": "GeneratorExit",
    "keyboard interrupt": "KeyboardInterrupt",
    "system exit": "SystemExit",
    "exception": "Exception",
    "arithmetic": "ArithmeticError",
    "float point": "FloatingPointError",
    "overflow": "OverflowError",
    "zero division": "ZeroDivisionError",
    "assertion": "AssertionError",
    "attribute": "AttributeError",
    "buffer": "BufferError",
    "end of file": "EOFError",
    "group": "ExceptionGroup",
    "import": "ImportError",
    "module not found": "ModuleNotFoundError",
    "lookup": "LookupError",
    "index": "IndexError",
    "key": "KeyError",
    "memory": "MemoryError",
    "name": "NameError",
    "unbound local": "UnboundLocalError",
    "operating system": "OSError",
    "blocking": "BlockingIOError",
    "child process": "ChildProcessError",
    "connection": "ConnectionError",
    "broken pipe": "BrokenPipeError",
    "connection aborted": "ConnectionAbortedError",
    "conntection refused": "ConnectionRefusedError",
    "connection reset": "ConnectionResetError",
    "file exists": "FileExistsError",
    "file not found": "FileNotFoundError",
    "interrupted": "InterruptedError",
    "directory": "IsADirectoryError",
    "not directory": "NotADirectoryError",
    "permission": "PermissionError",
    "process lookup": "ProcessLookupError",
    "timeout": "TimeoutError",
    "reference": "ReferenceError",
    "runtime": "RuntimeError",
    "not implemented": "NotImplementedError",
    "recursion": "RecursionError",
    "stop async": "StopAsyncIteration",
    "stop iteration": "StopIteration",
    "syntax": "SyntaxError",
    "indentation": "IndentationError",
    "tab": "TabError",
    "system": "SystemError",
    "type": "TypeError",
    "value": "ValueError",
    "unicode": "UnicodeError",
    "decode": "UnicodeDecodeError",
    "encode": "UnicodeEncodeError",
    "translate": "UnicodeTranslateError",
    "warning": "Warning",
    "bytes warning": "BytesWarning",
    "deprecation warning": "DeprecationWarning",
    "encode warning": "EncodingWarning",
    "future warning": "FutureWarning",
    "import warning": "ImportWarning",
    "pending warning": "PendingDeprecationWarning",
    "resource warning": "ResourceWarning",
    "runtime warning": "RuntimeWarning",
    "syntax warning": "SyntaxWarning",
    "unicode warning": "UnicodeWarning",
    "user warning": "UserWarning"
}

@ctx.action_class("user")
class CodeActions:
    def code_exception_raise(name: str):
        actions.user.vim_insert_mode(f"raise {name}", "o")

